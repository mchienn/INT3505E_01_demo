openapi: 3.0.0
info:
  title: JWT Authentication API
  version: 2.0.0
  description: Production-ready JWT authentication with access/refresh tokens

servers:
  - url: http://localhost:5000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
        - full_name
      properties:
        username:
          type: string
          example: newuser
        password:
          type: string
          minLength: 8
          example: SecurePass123
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          example: John Doe

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin123

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        user:
          type: object

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
        new_password:
          type: string
          minLength: 8

    Error:
      type: object
      properties:
        error:
          type: string

paths:
  /auth/register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: Login and get tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Account inactive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: Token refreshed successfully
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: Logout (blacklist tokens)
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        "200":
          description: Logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      summary: Get current user info
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User information
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/change-password:
    post:
      summary: Change password
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
        "401":
          description: Invalid old password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/public:
    get:
      summary: Public endpoint (no auth required)
      tags:
        - Public
      responses:
        "200":
          description: Public data

  /api/protected:
    get:
      summary: Protected endpoint (requires auth)
      tags:
        - Protected
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Protected data
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/admin:
    get:
      summary: Admin endpoint (requires admin role)
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Admin data
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/admin/users:
    get:
      summary: Get all users
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all users
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/admin/users/{user_id}/toggle-status:
    post:
      summary: Toggle user active/inactive status
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        "200":
          description: User status toggled
        "403":
          description: Forbidden (not admin or cannot deactivate admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/admin/users/{user_id}:
    get:
      summary: Get user by ID
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        "200":
          description: User details
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update user information
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: newemail@example.com
                full_name:
                  type: string
                  example: Updated Name
                role:
                  type: string
                  enum: [admin, user]
                  example: user
                password:
                  type: string
                  minLength: 8
                  example: NewPass123
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete user
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        "200":
          description: User deleted successfully
        "403":
          description: Forbidden (not admin, cannot delete admin, cannot delete yourself)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/admin/refresh-tokens:
    get:
      summary: View all active refresh tokens
      tags:
        - Admin
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token statistics and active tokens
        "403":
          description: Forbidden (not admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
